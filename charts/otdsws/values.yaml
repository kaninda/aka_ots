########################################################################
# Settings for OpenText Directory Services (OTDS)
# This is a YAML-formatted file.
# Declare variables to be passed into your templates.
########################################################################
## Pod Security Context
## ref: https://kubernetes.io/docs/tasks/configure-pod-container/security-context/
##
## For deploying in OpenShift, fsGroup, runAsUser and runAsGroup need to be set to allowed values,
## eg. fsGroup=1000620000, runAsUser=1000620000 and runAsGroup=0.
securityContext:
  fsGroup: 1000
  runAsGroup: 1000
  runAsUser: 1000
  ##readOnlyRootFilesystem cannot be set to true if the 'initContainers' property is used
  readOnlyRootFilesystem: false
## podLabels list additional pod labels to apply
## eg:
## podLabels:
##   app.kubernetes.io/app_name:  otdsws
##   app.kubernetes.io/app_version: yy.q
podLabels: {}
## podAnnotations list additional pod annotations to apply
podAnnotations: {}
## enabled controls if OTDS gets deployed as a container in
## Kubernetes. If you have OTDS deployed somewhere else you can set
## it to false.
enabled: true
## serviceAccountName defines the name of the service account the
## pods are running under. Normally that is 'default'
serviceAccountName:
## statefulSet controls whether the OTDS server gets deployed as a StatefulSet
## Kubernetes resource. If false, OTDS gets deployed as a Kubernetes Deployment.
## A StatefulSet used to be required for synchronized partitions in earlier versions
## but this is no longer the case. This option is retained for backward compatibility.
statefulSet: false
## The k8s affinity, tolerations, and topologySpreadConstraints to apply to the deployment
affinity:
tolerations:
topologySpreadConstraints:
## ingress enables Kubernetes Ingress for OTDS
ingress:
  enabled: true
  secret:
  ## prependPath can be used to prepend a value to the standard OTDS server
  ## path when multiple services share a hostname.  Adding a value of "otds"
  ## would result in the login URL being <publicHostname>/otds/otdsws/login.
  prependPath:
## serviceName defines the name of the Kubernetes service for OTDS:
serviceName:
## serviceType can be used to override the spec type for the otdsws
## service.  If this value is not set the value is defined
## based on the value of ingress.enabled.  The type is set to ClusterIP
## if ingress is enabled and LoadBalancer if it is disabled.
serviceType:
## serviceAnnotations define custom annotations that need to be assigned to OTDS service.
## For example,
##  cloud.google.com/backend-config: '{"ports": {"80": "abcd-otds-backend"}}'
##  cloud.google.com/neg: '{"ingress": true}'
serviceAnnotations: {}
## deprecated - this is always true now
carrierGradeNAT: true
## customSecretName defines the name of an already existing secret object.
## This is useful when OTDS charts work as subcharts and parent chart create
## a single secret.
customSecretName:
## replicas for OTDS server:
replicas: 1
## port defines the external port for the OTDS Kubernetes service:
port: 80
## targetPort defines the internal container port for the
## OTDS Kubernetes service:
targetPort: 8080
## protocol: communication protocol - used in config map
protocol: http
## portProtocol is the protocol the OTDS Kubernetes service is using:
portProtocol: TCP
## publicHostname defines the FQDN or IP address of the
## Kubernetes Services of OTDS. If empty ("") the hostname
## will dynamically be determined via the Kubernetes API.
publicHostname:
## timeZone defines the time zone of the Linux OS within the container. The default value for
## the timeZone is Etc/UTC.
timeZone:
## allowDuplicateUsers controls whether OTDS should allow the same user accounts to be created in multiple partitions
## This applies to users synchronized through eDirSync or SCIM
allowDuplicateUsers: true
## allowNonIndexedSearch control whether OTDS should allow API queries based on user attributes that are not
## indexed, and not related to authentication. This is typically required to enable searches for large sets of users that meet a criteria
## (e.g. same department, country, etc.). If such searches are executed often by many users, it could lead to significant load on the database
allowNonIndexedSearch: false
## System global OAuth clients are those in the OTDS system tenant that are privileged.
## They inherit any system administration rights that they have on the system tenant within other tenants.
systemGlobalOAuthClients:
## cryptKey is used for secure synchronized access to backend DB from
## frontend instances
## The value is a 16 character ASCII string that has been base64 encoded
## For example, "MTIzNDU2Nzg5YWNiZGVmZw==" is the base64 encoded value of "123456789acbdefg"
cryptKey:
## additionalJavaOpts defines additional Java parameters (space-separated) for OTDS.
additionalJavaOpts:
## enableBootstrapConfig enable the use of the config.yml file in the otdsws chart directory
## to apply a specific set of configuration options on the initial run
## when the DB is populated.
## A sample config.yml file is in the otdsws chart directory
enableBootstrapConfig: false
## existingBootstrapConfig can be used to specify the content of the OTDS bootstrap configuration file.
## This overrides the configuration files in the chart directory
existingBootstrapConfig: |

## kerberos.* defines the configuration options to allow Kerberos authentication in OTDS.
## Note that the OTDS pods must be able to connect to to KDC for this to work.
kerberos:
  ## enable Kerberos configurations
  enabled: false
  ## keytabFile can be used with --set-file to provide the keytab file to be used. 
  ## Alternately, a krb5kt file can be placed in the config/kerberos directory of the
  ## extracted helm chart.
  keytabFile: |

  ## configFile can be used with --set-file to provide the krb5.conf file used for more 
  ## complicated Kerberos configuration.  Alternately, a krb5.conf file can be placed in the
  ## config/kerberos directory of the extracted helm chart.
  ## In most cases this can be skipped and configuration options can be set using additionalJavaOpts.
  ## e.g. -Djava.security.krb5.realm=DOMAIN.LOCAL -Djava.security.krb5.kdc=domainserver.domain.local
  configFile: |

## adminEmail is the email address of the initial account to be created to administer OTDS
## OPTIONAL. If not provided, the default admin user with ID otadmin@otds.admin will be created.
adminEmail:
## adminPassword is the password of the admin user
## Note that this password is only used when initially creating the user in a new database.
## If not provided, an account without a password will be created. The user will have to
## use the password reset mechanism to gain access, assuming adminEmail is provided, and OTDS is bootstrapped
## with functional SMTP server settings.
adminPassword:
## isBizAdmin is true/false and controls whether the admin user gets full system admin rights (if false)
## or only business administration rights in OTDS (if true). 
## WARNING: if true, there will be no account in OTDS with full system administration rights unless one is bootstrapped.
isBizAdmin: false

## enableCustomizedTruststore enables the import of custom certificates into the JVM truststore.
## Used to import self-signed or private CA certificates.
## Certificates to import must be placed in /certificates directory of the Helm chart or specified
## with set-file option.
enableCustomizedTruststore: false
## singleCaCert can be used to provide a single certificate file using --set-file
## This method can be used in lieu of placing certificates in the /certificates directory of the Helm chart
singleCaCert: |

## migration.* defines if migration from OpenDJ should be attempted and
## defines how the migration should take place.
## There are three different ways migration can take place.
## 1. From a legacy OTDS deployment (eg. otds:21.3.0 images), which requires
##    usingLegacyImage=true and that legacyImagePVC is specified.
##    For this option the minimum memory requirements are increased
##    resource.requests.memory=2Gi and resource.limits.memory=3Gi
## 2. From an existing OTDS deployment in the same cluster, which requires
##    the existing opendj serviceName servicePort and password be specified.
##    deploymentName is used to specify the current OTDS deployment which
##    should be stopped. This is only needed if the value of
##    global.otdsUseReleaseName is being changed during the upgrade.
## 3. From an external OpenDJ such as a VM deployment, which requires
##    the opendjUri (eg. ldap://otds.domain.local:1389) and password
##    be specified.
## Note that if usingLegacyImage=true other non-relevant values will
## be ignored and if opendjUri is specified servicename will be ignored.
## If enabled=true the default values will migrate from the previous
## default configuration.
migration:
  enabled: false
  usingLegacyImage: false
  legacyImagePVC:
  serviceName: opendj
  servicePort: 1389
  deploymentName:
  opendjUri:
  password:
  ## preUpgradeJob.* enables the one-step migration/deployment via pre-upgrade jobs
  ## image.* defines the image parameters (i.e. the kubectl) used for pre-upgrade job
  preUpgradeJob:
    enabled: false
    ## timeout defines the timeout value for migrate job to complete
    ## e.g. 5000s, 30m, 100h
    timeout: 100h
    ## resources.* defines image parameters for data migrate job, for OpenDJ migrate
    ## the pod's memory should have at minimum 3Gi momory
    resources:
      requests:
        cpu: 0.5
        memory: 3Gi
      limits:
        cpu: 2
        memory: 3Gi
      ## jvmMemory sets the maximum amount of memory used by the OpenDJ migrate JVM
      ## If this value is not set, the JVM memory will be set to 75% of preUgrateJob
      ## resources.limits.memory. Memory amounts in M, Mi, G or Gi are supported
      ## The JVM memory should be set to at least 2Gi as it will be split between OpenDJ and Tomcat.
      ## For JVM memory <= 4Gi, OpenDJ will take 1.5Gi.
      ## For 8Gi >= JVM memory > 4Gi, OpenDJ will take 2Gi.
      ## For JVM memory > 8Gi, OpenDJ will take 3Gi.
      jvmMemory:
    ## image.* defines image parameters for pre-upgrade job
    image:
      source:
      name: bitnami/kubectl
      tag: latest
## otdsdb.* defines the connection information for the DB which is the
## backend data storage location for OTDS
otdsdb:
  ## url specified the url used to connect to the DB for OTDS
  ## The following is a list of sample values.
  ## jdbc:postgresql://postgres.domain.local:5432/otdsdb
  ## jdbc:sqlserver://ms-sql.domain.local:1433;databaseName=otdsdb
  ## jdbc:oracle:thin:@oracle.domain.local:1521:otdsdb
  ## jdbc:sap://hana.domain.local:30015/?databaseName=otdsdb
  ## For encrypted connection, the list of sample values is as follows
  ## jdbc:postgresql://postgres.domain.local:5432/otdsdb?ssl=true&sslmode=verify-ca&sslfactory=org.postgresql.ssl.DefaultJavaSSLFactory
  ## jdbc:sqlserver://ms-sql.domain.local:1433;databaseName=otdsdb;integratedSecurity=true;encrypt=true;trustServerCertificate=true;sslProtocol=TLSv1.2
  ## jdbc:oracle:thin:@(DESCRIPTION=(ADDRESS=(PROTOCOL=tcps)(HOST=oracle.domain.local)(PORT=2484))(CONNECT_DATA=(SERVICE_NAME=linux11g)))
  ## jdbc:sap://hana.domain.local:30015/?databaseName=otdsdb&encrypt=true
  ## for SSL connection needs to verify server CA certificate via truststore, needs to set enableCustomizedTruststore then
  ## the helm chart will import root CA certificate into a user writable copy of default Java truststore
  ## for the url which includes sslDBRootCert e.g. postgres SSL connection, the location of sslrootcert is /opt/config/certificates/dbRootCA.crt
  ## jdbc:postgresql://postgres.domain.local:5432/otdsdb?ssl=true&sslmode=verify-ca&sslrootcert=/opt/config/certificates/dbRootCA.crt
  url:
  ## username specifies the account for the DB connection
  username:
  ## password specifies the password for the DB account
  password:
  ## By default, OTDS uses a database schema named 'otds'
  ## Set this option to true to use the default schema assigned to the database user account instead.
  ## Often required on a shared Oracle database.
  useDefaultSchema: false
  ## automaticDatabaseCreation can be used to automatically create the specified database (in otdsdb.url) if it does not exist.
  ## This is OPTIONAL! Typically the database is pre-created by IAC or otherwise by a system administrator.
  ## This feature is currently only supported with PostgreSQL
  automaticDatabaseCreation:
    enabled: false
    ## dbAdmin defines the admin account (e.g. 'postgres').
    dbAdmin:
    ## dbAdminPassword defines password for the dbAdmin account
    dbAdminPassword:
    ## dbExtensions defines the extensions to be created on the database.
    ## The pg_trgm extension is required.
    dbExtensions:
      - pg_trgm
    ## dbImage.* defines database image to run the psql client for the automatic database creation. Specific version/tag should be used in production.
    dbImage:
      source:
      name: bitnami/postgresql
      tag: latest
      pullPolicy:
## image.* defines Docker image location, tags and pull parameters for
## OTDS - you need to adjust this:
image:
  source:
  name: otds-server
  tag: 25.1.2
  pullPolicy:
  pullSecret:
## resource.* define the resource requirements for OTDS:
resources:
  enabled:
  requests:
    cpu: 0.5
    memory: 1.5Gi
  limits:
    cpu: 2
    memory: 1.5Gi
## newrelic.* define NewRelic settings for OTDS
## if customer has NewRelic license and would like to enable NewRelic APM, can configure below settings
newrelic:
  NEW_RELIC_LICENSE_KEY:
  NEW_RELIC_APP_NAME:
  NEW_RELIC_LOG_FILE_NAME: STDOUT
  NEW_RELIC_LOG_LEVEL: info
  NEW_RELIC_BROWSER_MONITORING_AUTO_INSTRUMENT: false
## pvc.* defines a persistent volume claim
## This is only required for the following use cases:
## - exporting/importing tenants
## - logging to files is enabled
pvc:
  enabled: false
  storage: 256Mi
  storageClassName:
## Logging is written to stdout and show up in the pod's log output.
## If logToFiles is true, logs will be written to files in addition to the pod log.
## If logToPVC is true, logs are written to the PVC defined above. Otherwise, they are written to tomcat/logs.
logging:
  logToFiles: false
  logToPVC: false
## vault.* define HashiCorp Vault integration settings
## OTDS will read secrets from Vault rather than using k8s secrets
vault:
  enabled: false
  ## Vault Agent Injector - set to true to use the Vault Agent Sidecar Injector rather than having OTDS connect directly to Vault
  agentInjector: false
  ## the URL to the vault server. Use http://localhost:8200 if using the Vault Agent Injector.
  url: http://localhost:8200
  ## if using Vault namespaces, provide the namespace
  namespace:
  ## auth path for k8s auth
  authpath: auth/kubernetes
  ## audience for the projected service account token (optional)
  tokenAudience:
  ## if the connection to Vault needs to go through a proxy, specify it here (e.g. http://proxyhost:port)
  ## (only applicable if using the agentInjector)
  proxyAddress:
  ## the name of the Vault role for OTDS to use
  role:
  ## the path in Vault to the following secrets:
  ## - CryptKey (with key 'CryptKey'). See description for 'cryptKey'.
  ## - AdminPassword (with key 'AdminPassword'). See description for 'adminPassword'.
  ## - JDBCCreds (with keys 'username' and 'password'). See description for 'otdsdb.username' and 'otdsdb.password'.
  ## - OpenDJPassword (with key 'OpenDJPassword') **ONLY REQUIRED IF MIGRATING FROM OPENDJ. See description for 'migration'. **
  ## The path must *NOT* include the /v1 prefix, namespace, or the /data/ qualifier. These are automatically added by OTDS.
  secretsPath:
  ## useDynamicDbSecret controls whether to use the Vault database secrets engine to obtain DB credentials.
  ## If this is enabled, then the static JDBCCreds secret described above is not required.
  ## !!Note!! The DB credentials must be renewable, with a lease time no less than 10 minutes
  ## Each pod will acquire new credentials on startup, and will perpetually renew them.
  useDynamicDbSecret: false
  ## if using dynamic DB secret, provide the path to the Vault database secrets engine
  dbBackendMountPath: database
  ## if using dynamic DB secret, provide the role to which the database credentials are mapped
  dbBackendRole:
## initContainers defines additional init containers to run on startup to customize the OTDS image contents.
## Customization files must be placed into the /otdsws directory of the init container image
initContainers:
  # - name: DESIRED_NAME_FOR_INIT_CONTAINER
  #   image:
  #     source: IMAGE_SOURCE
  #     name: IMAGE_NAME
  #     tag: IMAGE_TAG